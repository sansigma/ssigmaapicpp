// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssigmaapi/markethub/v1/markethub.proto

#include "ssigmaapi/markethub/v1/markethub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExchangeStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetOrderBooksRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GetTradesRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TradeWithAdditionalInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GetOrderBooksResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GetTradesResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TradesWithMarket;
}  // namespace protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto
namespace protobuf_ssigmaapi_2ftype_2fmarket_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2ftype_2fmarket_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Market;
}  // namespace protobuf_ssigmaapi_2ftype_2fmarket_2eproto
namespace protobuf_ssigmaapi_2ftype_2forderbook_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2ftype_2forderbook_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OrderBook;
}  // namespace protobuf_ssigmaapi_2ftype_2forderbook_2eproto
namespace protobuf_ssigmaapi_2ftype_2ftrade_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssigmaapi_2ftype_2ftrade_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Trade;
}  // namespace protobuf_ssigmaapi_2ftype_2ftrade_2eproto
namespace ssigmaapi {
namespace markethub {
namespace v1 {
class GetTradesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTradesRequest>
      _instance;
} _GetTradesRequest_default_instance_;
class GetTradesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTradesResponse>
      _instance;
} _GetTradesResponse_default_instance_;
class GetOrderBooksRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetOrderBooksRequest>
      _instance;
} _GetOrderBooksRequest_default_instance_;
class GetOrderBooksResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetOrderBooksResponse>
      _instance;
} _GetOrderBooksResponse_default_instance_;
class GetTradesAndOrderBooksRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTradesAndOrderBooksRequest>
      _instance;
} _GetTradesAndOrderBooksRequest_default_instance_;
class GetTradesAndOrderBooksResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTradesAndOrderBooksResponse>
      _instance;
} _GetTradesAndOrderBooksResponse_default_instance_;
class TradeWithAdditionalInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeWithAdditionalInfo>
      _instance;
} _TradeWithAdditionalInfo_default_instance_;
class TradesWithMarketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradesWithMarket>
      _instance;
} _TradesWithMarket_default_instance_;
class ExchangeStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExchangeStatus>
      _instance;
} _ExchangeStatus_default_instance_;
}  // namespace v1
}  // namespace markethub
}  // namespace ssigmaapi
namespace protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto {
static void InitDefaultsGetTradesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_GetTradesRequest_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::GetTradesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::GetTradesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTradesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTradesRequest}, {
      &protobuf_ssigmaapi_2ftype_2fmarket_2eproto::scc_info_Market.base,}};

static void InitDefaultsGetTradesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_GetTradesResponse_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::GetTradesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::GetTradesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetTradesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetTradesResponse}, {
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_TradesWithMarket.base,
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_ExchangeStatus.base,}};

static void InitDefaultsGetOrderBooksRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_GetOrderBooksRequest_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::GetOrderBooksRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::GetOrderBooksRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetOrderBooksRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetOrderBooksRequest}, {
      &protobuf_ssigmaapi_2ftype_2fmarket_2eproto::scc_info_Market.base,}};

static void InitDefaultsGetOrderBooksResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_GetOrderBooksResponse_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::GetOrderBooksResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::GetOrderBooksResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetOrderBooksResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetOrderBooksResponse}, {
      &protobuf_ssigmaapi_2ftype_2forderbook_2eproto::scc_info_OrderBook.base,
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_ExchangeStatus.base,}};

static void InitDefaultsGetTradesAndOrderBooksRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_GetTradesAndOrderBooksRequest_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetTradesAndOrderBooksRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetTradesAndOrderBooksRequest}, {
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesRequest.base,
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetOrderBooksRequest.base,}};

static void InitDefaultsGetTradesAndOrderBooksResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_GetTradesAndOrderBooksResponse_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GetTradesAndOrderBooksResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGetTradesAndOrderBooksResponse}, {
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesResponse.base,
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetOrderBooksResponse.base,
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_ExchangeStatus.base,}};

static void InitDefaultsTradeWithAdditionalInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_TradeWithAdditionalInfo_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::TradeWithAdditionalInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::TradeWithAdditionalInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradeWithAdditionalInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradeWithAdditionalInfo}, {
      &protobuf_ssigmaapi_2ftype_2ftrade_2eproto::scc_info_Trade.base,}};

static void InitDefaultsTradesWithMarket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_TradesWithMarket_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::TradesWithMarket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::TradesWithMarket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TradesWithMarket =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTradesWithMarket}, {
      &protobuf_ssigmaapi_2ftype_2fmarket_2eproto::scc_info_Market.base,
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_TradeWithAdditionalInfo.base,}};

static void InitDefaultsExchangeStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::markethub::v1::_ExchangeStatus_default_instance_;
    new (ptr) ::ssigmaapi::markethub::v1::ExchangeStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::markethub::v1::ExchangeStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExchangeStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExchangeStatus}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetTradesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTradesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetOrderBooksRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetOrderBooksResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTradesAndOrderBooksRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTradesAndOrderBooksResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeWithAdditionalInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradesWithMarket.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExchangeStatus.base);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesRequest, markets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesRequest, velocity_windowing_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesRequest, volatility_windowing_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesRequest, volume_windowing_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesResponse, trades_with_market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesResponse, exchange_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetOrderBooksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetOrderBooksRequest, market_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetOrderBooksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetOrderBooksResponse, all_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetOrderBooksResponse, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetOrderBooksResponse, exchange_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest, trades_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest, orderbooks_req_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse, trades_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse, orderbooks_res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse, exchange_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, trade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, volatility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, volume_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, volume_quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, momentum_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, velocity_windowing_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, volatility_windowing_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo, volume_windowing_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradesWithMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradesWithMarket, market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::TradesWithMarket, trades_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::ExchangeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::ExchangeStatus, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ssigmaapi::markethub::v1::ExchangeStatus, open_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ssigmaapi::markethub::v1::GetTradesRequest)},
  { 9, -1, sizeof(::ssigmaapi::markethub::v1::GetTradesResponse)},
  { 16, -1, sizeof(::ssigmaapi::markethub::v1::GetOrderBooksRequest)},
  { 22, -1, sizeof(::ssigmaapi::markethub::v1::GetOrderBooksResponse)},
  { 30, -1, sizeof(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest)},
  { 37, -1, sizeof(::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse)},
  { 45, -1, sizeof(::ssigmaapi::markethub::v1::TradeWithAdditionalInfo)},
  { 60, -1, sizeof(::ssigmaapi::markethub::v1::TradesWithMarket)},
  { 67, -1, sizeof(::ssigmaapi::markethub::v1::ExchangeStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_GetTradesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_GetTradesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_GetOrderBooksRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_GetOrderBooksResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_GetTradesAndOrderBooksRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_GetTradesAndOrderBooksResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_TradeWithAdditionalInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_TradesWithMarket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::markethub::v1::_ExchangeStatus_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssigmaapi/markethub/v1/markethub.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&ssigmaapi/markethub/v1/markethub.proto"
      "\022\026ssigmaapi.markethub.v1\032\033ssigmaapi/type"
      "/market.proto\032\032ssigmaapi/type/trade.prot"
      "o\032\036ssigmaapi/type/orderbook.proto\032\034googl"
      "e/api/annotations.proto\"\236\001\n\020GetTradesReq"
      "uest\022\'\n\007markets\030\001 \003(\0132\026.ssigmaapi.type.M"
      "arket\022\037\n\027velocity_windowing_size\030\002 \001(\003\022!"
      "\n\031volatility_windowing_size\030\003 \001(\003\022\035\n\025vol"
      "ume_windowing_size\030\004 \001(\003\"\232\001\n\021GetTradesRe"
      "sponse\022D\n\022trades_with_market\030\001 \003(\0132(.ssi"
      "gmaapi.markethub.v1.TradesWithMarket\022\?\n\017"
      "exchange_status\030\002 \003(\0132&.ssigmaapi.market"
      "hub.v1.ExchangeStatus\">\n\024GetOrderBooksRe"
      "quest\022&\n\006market\030\001 \003(\0132\026.ssigmaapi.type.M"
      "arket\"\223\001\n\025GetOrderBooksResponse\022&\n\003all\030\001"
      " \003(\0132\031.ssigmaapi.type.OrderBook\022\021\n\ttimes"
      "tamp\030\002 \001(\003\022\?\n\017exchange_status\030\003 \003(\0132&.ss"
      "igmaapi.markethub.v1.ExchangeStatus\"\243\001\n\035"
      "GetTradesAndOrderBooksRequest\022<\n\ntrades_"
      "req\030\001 \001(\0132(.ssigmaapi.markethub.v1.GetTr"
      "adesRequest\022D\n\016orderbooks_req\030\002 \001(\0132,.ss"
      "igmaapi.markethub.v1.GetOrderBooksReques"
      "t\"\347\001\n\036GetTradesAndOrderBooksResponse\022=\n\n"
      "trades_res\030\001 \001(\0132).ssigmaapi.markethub.v"
      "1.GetTradesResponse\022E\n\016orderbooks_res\030\002 "
      "\001(\0132-.ssigmaapi.markethub.v1.GetOrderBoo"
      "ksResponse\022\?\n\017exchange_status\030\003 \003(\0132&.ss"
      "igmaapi.markethub.v1.ExchangeStatus\"\240\002\n\027"
      "TradeWithAdditionalInfo\022$\n\005trade\030\001 \001(\0132\025"
      ".ssigmaapi.type.Trade\022\020\n\010velocity\030\002 \001(\001\022"
      "\024\n\014acceleration\030\003 \001(\001\022\022\n\nvolatility\030\004 \001("
      "\001\022\023\n\013volume_base\030\005 \001(\001\022\024\n\014volume_quote\030\006"
      " \001(\001\022\025\n\rmomentum_rate\030\007 \001(\001\022\037\n\027velocity_"
      "windowing_size\030\010 \001(\003\022!\n\031volatility_windo"
      "wing_size\030\t \001(\003\022\035\n\025volume_windowing_size"
      "\030\n \001(\003\"{\n\020TradesWithMarket\022&\n\006market\030\001 \001"
      "(\0132\026.ssigmaapi.type.Market\022\?\n\006trades\030\002 \003"
      "(\0132/.ssigmaapi.markethub.v1.TradeWithAdd"
      "itionalInfo\"0\n\016ExchangeStatus\022\020\n\010exchang"
      "e\030\001 \001(\t\022\014\n\004open\030\002 \001(\0102\313\004\n\022MarketHubServi"
      "ceV1\022\326\001\n\tGetTrades\022(.ssigmaapi.markethub"
      ".v1.GetTradesRequest\032).ssigmaapi.marketh"
      "ub.v1.GetTradesResponse\"r\202\323\344\223\002l\"g/v1/mar"
      "ket-hub/get-trades/{velocity_windowing_s"
      "ize}/{volatility_windowing_size}/{volume"
      "_windowing_size}:\001*0\001\022\231\001\n\rGetOrderBooks\022"
      ",.ssigmaapi.markethub.v1.GetOrderBooksRe"
      "quest\032-.ssigmaapi.markethub.v1.GetOrderB"
      "ooksResponse\")\202\323\344\223\002#\"\036/v1/market-hub/get"
      "-order-books:\001*0\001\022\277\001\n\026GetTradesAndOrderB"
      "ooks\0225.ssigmaapi.markethub.v1.GetTradesA"
      "ndOrderBooksRequest\0326.ssigmaapi.markethu"
      "b.v1.GetTradesAndOrderBooksResponse\"4\202\323\344"
      "\223\002.\")/v1/market-hub/get-trades-and-order"
      "-books:\001*0\001B6Z4github.com/kaito2/ssigmaa"
      "pigo/markethub/v1;markethubb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssigmaapi/markethub/v1/markethub.proto", &protobuf_RegisterTypes);
  ::protobuf_ssigmaapi_2ftype_2fmarket_2eproto::AddDescriptors();
  ::protobuf_ssigmaapi_2ftype_2ftrade_2eproto::AddDescriptors();
  ::protobuf_ssigmaapi_2ftype_2forderbook_2eproto::AddDescriptors();
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto
namespace ssigmaapi {
namespace markethub {
namespace v1 {

// ===================================================================

void GetTradesRequest::InitAsDefaultInstance() {
}
void GetTradesRequest::clear_markets() {
  markets_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTradesRequest::kMarketsFieldNumber;
const int GetTradesRequest::kVelocityWindowingSizeFieldNumber;
const int GetTradesRequest::kVolatilityWindowingSizeFieldNumber;
const int GetTradesRequest::kVolumeWindowingSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTradesRequest::GetTradesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.GetTradesRequest)
}
GetTradesRequest::GetTradesRequest(const GetTradesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      markets_(from.markets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&velocity_windowing_size_, &from.velocity_windowing_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_windowing_size_) -
    reinterpret_cast<char*>(&velocity_windowing_size_)) + sizeof(volume_windowing_size_));
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.GetTradesRequest)
}

void GetTradesRequest::SharedCtor() {
  ::memset(&velocity_windowing_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_windowing_size_) -
      reinterpret_cast<char*>(&velocity_windowing_size_)) + sizeof(volume_windowing_size_));
}

GetTradesRequest::~GetTradesRequest() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.GetTradesRequest)
  SharedDtor();
}

void GetTradesRequest::SharedDtor() {
}

void GetTradesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTradesRequest::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTradesRequest& GetTradesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesRequest.base);
  return *internal_default_instance();
}


void GetTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.GetTradesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markets_.Clear();
  ::memset(&velocity_windowing_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_windowing_size_) -
      reinterpret_cast<char*>(&velocity_windowing_size_)) + sizeof(volume_windowing_size_));
  _internal_metadata_.Clear();
}

bool GetTradesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.GetTradesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssigmaapi.type.Market markets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_markets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 velocity_windowing_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &velocity_windowing_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 volatility_windowing_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volatility_windowing_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 volume_windowing_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_windowing_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.GetTradesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.GetTradesRequest)
  return false;
#undef DO_
}

void GetTradesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.GetTradesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.Market markets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->markets(static_cast<int>(i)),
      output);
  }

  // int64 velocity_windowing_size = 2;
  if (this->velocity_windowing_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->velocity_windowing_size(), output);
  }

  // int64 volatility_windowing_size = 3;
  if (this->volatility_windowing_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->volatility_windowing_size(), output);
  }

  // int64 volume_windowing_size = 4;
  if (this->volume_windowing_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->volume_windowing_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.GetTradesRequest)
}

::google::protobuf::uint8* GetTradesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.GetTradesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.Market markets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->markets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->markets(static_cast<int>(i)), deterministic, target);
  }

  // int64 velocity_windowing_size = 2;
  if (this->velocity_windowing_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->velocity_windowing_size(), target);
  }

  // int64 volatility_windowing_size = 3;
  if (this->volatility_windowing_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->volatility_windowing_size(), target);
  }

  // int64 volume_windowing_size = 4;
  if (this->volume_windowing_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->volume_windowing_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.GetTradesRequest)
  return target;
}

size_t GetTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.GetTradesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ssigmaapi.type.Market markets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->markets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->markets(static_cast<int>(i)));
    }
  }

  // int64 velocity_windowing_size = 2;
  if (this->velocity_windowing_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->velocity_windowing_size());
  }

  // int64 volatility_windowing_size = 3;
  if (this->volatility_windowing_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volatility_windowing_size());
  }

  // int64 volume_windowing_size = 4;
  if (this->volume_windowing_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume_windowing_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTradesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.GetTradesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTradesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTradesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.GetTradesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.GetTradesRequest)
    MergeFrom(*source);
  }
}

void GetTradesRequest::MergeFrom(const GetTradesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.GetTradesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  markets_.MergeFrom(from.markets_);
  if (from.velocity_windowing_size() != 0) {
    set_velocity_windowing_size(from.velocity_windowing_size());
  }
  if (from.volatility_windowing_size() != 0) {
    set_volatility_windowing_size(from.volatility_windowing_size());
  }
  if (from.volume_windowing_size() != 0) {
    set_volume_windowing_size(from.volume_windowing_size());
  }
}

void GetTradesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.GetTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTradesRequest::CopyFrom(const GetTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.GetTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradesRequest::IsInitialized() const {
  return true;
}

void GetTradesRequest::Swap(GetTradesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTradesRequest::InternalSwap(GetTradesRequest* other) {
  using std::swap;
  CastToBase(&markets_)->InternalSwap(CastToBase(&other->markets_));
  swap(velocity_windowing_size_, other->velocity_windowing_size_);
  swap(volatility_windowing_size_, other->volatility_windowing_size_);
  swap(volume_windowing_size_, other->volume_windowing_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTradesRequest::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTradesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTradesResponse::kTradesWithMarketFieldNumber;
const int GetTradesResponse::kExchangeStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTradesResponse::GetTradesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.GetTradesResponse)
}
GetTradesResponse::GetTradesResponse(const GetTradesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trades_with_market_(from.trades_with_market_),
      exchange_status_(from.exchange_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.GetTradesResponse)
}

void GetTradesResponse::SharedCtor() {
}

GetTradesResponse::~GetTradesResponse() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.GetTradesResponse)
  SharedDtor();
}

void GetTradesResponse::SharedDtor() {
}

void GetTradesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTradesResponse::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTradesResponse& GetTradesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesResponse.base);
  return *internal_default_instance();
}


void GetTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.GetTradesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_with_market_.Clear();
  exchange_status_.Clear();
  _internal_metadata_.Clear();
}

bool GetTradesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.GetTradesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssigmaapi.markethub.v1.TradesWithMarket trades_with_market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades_with_market()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_exchange_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.GetTradesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.GetTradesResponse)
  return false;
#undef DO_
}

void GetTradesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.GetTradesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.markethub.v1.TradesWithMarket trades_with_market = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_with_market_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trades_with_market(static_cast<int>(i)),
      output);
  }

  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exchange_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->exchange_status(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.GetTradesResponse)
}

::google::protobuf::uint8* GetTradesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.GetTradesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.markethub.v1.TradesWithMarket trades_with_market = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_with_market_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trades_with_market(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exchange_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->exchange_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.GetTradesResponse)
  return target;
}

size_t GetTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.GetTradesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ssigmaapi.markethub.v1.TradesWithMarket trades_with_market = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_with_market_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades_with_market(static_cast<int>(i)));
    }
  }

  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->exchange_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exchange_status(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTradesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.GetTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTradesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTradesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.GetTradesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.GetTradesResponse)
    MergeFrom(*source);
  }
}

void GetTradesResponse::MergeFrom(const GetTradesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.GetTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_with_market_.MergeFrom(from.trades_with_market_);
  exchange_status_.MergeFrom(from.exchange_status_);
}

void GetTradesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.GetTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTradesResponse::CopyFrom(const GetTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.GetTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradesResponse::IsInitialized() const {
  return true;
}

void GetTradesResponse::Swap(GetTradesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTradesResponse::InternalSwap(GetTradesResponse* other) {
  using std::swap;
  CastToBase(&trades_with_market_)->InternalSwap(CastToBase(&other->trades_with_market_));
  CastToBase(&exchange_status_)->InternalSwap(CastToBase(&other->exchange_status_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTradesResponse::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetOrderBooksRequest::InitAsDefaultInstance() {
}
void GetOrderBooksRequest::clear_market() {
  market_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOrderBooksRequest::kMarketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOrderBooksRequest::GetOrderBooksRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetOrderBooksRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.GetOrderBooksRequest)
}
GetOrderBooksRequest::GetOrderBooksRequest(const GetOrderBooksRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      market_(from.market_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.GetOrderBooksRequest)
}

void GetOrderBooksRequest::SharedCtor() {
}

GetOrderBooksRequest::~GetOrderBooksRequest() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  SharedDtor();
}

void GetOrderBooksRequest::SharedDtor() {
}

void GetOrderBooksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetOrderBooksRequest::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetOrderBooksRequest& GetOrderBooksRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetOrderBooksRequest.base);
  return *internal_default_instance();
}


void GetOrderBooksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_.Clear();
  _internal_metadata_.Clear();
}

bool GetOrderBooksRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssigmaapi.type.Market market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_market()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  return false;
#undef DO_
}

void GetOrderBooksRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.Market market = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->market_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->market(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.GetOrderBooksRequest)
}

::google::protobuf::uint8* GetOrderBooksRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.Market market = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->market_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->market(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  return target;
}

size_t GetOrderBooksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ssigmaapi.type.Market market = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->market_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->market(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOrderBooksRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOrderBooksRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetOrderBooksRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.GetOrderBooksRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.GetOrderBooksRequest)
    MergeFrom(*source);
  }
}

void GetOrderBooksRequest::MergeFrom(const GetOrderBooksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  market_.MergeFrom(from.market_);
}

void GetOrderBooksRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrderBooksRequest::CopyFrom(const GetOrderBooksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.GetOrderBooksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderBooksRequest::IsInitialized() const {
  return true;
}

void GetOrderBooksRequest::Swap(GetOrderBooksRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOrderBooksRequest::InternalSwap(GetOrderBooksRequest* other) {
  using std::swap;
  CastToBase(&market_)->InternalSwap(CastToBase(&other->market_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetOrderBooksRequest::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetOrderBooksResponse::InitAsDefaultInstance() {
}
void GetOrderBooksResponse::clear_all() {
  all_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOrderBooksResponse::kAllFieldNumber;
const int GetOrderBooksResponse::kTimestampFieldNumber;
const int GetOrderBooksResponse::kExchangeStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOrderBooksResponse::GetOrderBooksResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetOrderBooksResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.GetOrderBooksResponse)
}
GetOrderBooksResponse::GetOrderBooksResponse(const GetOrderBooksResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      all_(from.all_),
      exchange_status_(from.exchange_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.GetOrderBooksResponse)
}

void GetOrderBooksResponse::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
}

GetOrderBooksResponse::~GetOrderBooksResponse() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  SharedDtor();
}

void GetOrderBooksResponse::SharedDtor() {
}

void GetOrderBooksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetOrderBooksResponse::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetOrderBooksResponse& GetOrderBooksResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetOrderBooksResponse.base);
  return *internal_default_instance();
}


void GetOrderBooksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_.Clear();
  exchange_status_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetOrderBooksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssigmaapi.type.OrderBook all = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_all()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_exchange_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  return false;
#undef DO_
}

void GetOrderBooksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.OrderBook all = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->all(static_cast<int>(i)),
      output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exchange_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->exchange_status(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.GetOrderBooksResponse)
}

::google::protobuf::uint8* GetOrderBooksResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.OrderBook all = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->all(static_cast<int>(i)), deterministic, target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exchange_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->exchange_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  return target;
}

size_t GetOrderBooksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ssigmaapi.type.OrderBook all = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->all_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all(static_cast<int>(i)));
    }
  }

  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->exchange_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exchange_status(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOrderBooksResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOrderBooksResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetOrderBooksResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.GetOrderBooksResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.GetOrderBooksResponse)
    MergeFrom(*source);
  }
}

void GetOrderBooksResponse::MergeFrom(const GetOrderBooksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_.MergeFrom(from.all_);
  exchange_status_.MergeFrom(from.exchange_status_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void GetOrderBooksResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrderBooksResponse::CopyFrom(const GetOrderBooksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.GetOrderBooksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderBooksResponse::IsInitialized() const {
  return true;
}

void GetOrderBooksResponse::Swap(GetOrderBooksResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOrderBooksResponse::InternalSwap(GetOrderBooksResponse* other) {
  using std::swap;
  CastToBase(&all_)->InternalSwap(CastToBase(&other->all_));
  CastToBase(&exchange_status_)->InternalSwap(CastToBase(&other->exchange_status_));
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetOrderBooksResponse::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTradesAndOrderBooksRequest::InitAsDefaultInstance() {
  ::ssigmaapi::markethub::v1::_GetTradesAndOrderBooksRequest_default_instance_._instance.get_mutable()->trades_req_ = const_cast< ::ssigmaapi::markethub::v1::GetTradesRequest*>(
      ::ssigmaapi::markethub::v1::GetTradesRequest::internal_default_instance());
  ::ssigmaapi::markethub::v1::_GetTradesAndOrderBooksRequest_default_instance_._instance.get_mutable()->orderbooks_req_ = const_cast< ::ssigmaapi::markethub::v1::GetOrderBooksRequest*>(
      ::ssigmaapi::markethub::v1::GetOrderBooksRequest::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTradesAndOrderBooksRequest::kTradesReqFieldNumber;
const int GetTradesAndOrderBooksRequest::kOrderbooksReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTradesAndOrderBooksRequest::GetTradesAndOrderBooksRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesAndOrderBooksRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
}
GetTradesAndOrderBooksRequest::GetTradesAndOrderBooksRequest(const GetTradesAndOrderBooksRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trades_req()) {
    trades_req_ = new ::ssigmaapi::markethub::v1::GetTradesRequest(*from.trades_req_);
  } else {
    trades_req_ = NULL;
  }
  if (from.has_orderbooks_req()) {
    orderbooks_req_ = new ::ssigmaapi::markethub::v1::GetOrderBooksRequest(*from.orderbooks_req_);
  } else {
    orderbooks_req_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
}

void GetTradesAndOrderBooksRequest::SharedCtor() {
  ::memset(&trades_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderbooks_req_) -
      reinterpret_cast<char*>(&trades_req_)) + sizeof(orderbooks_req_));
}

GetTradesAndOrderBooksRequest::~GetTradesAndOrderBooksRequest() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  SharedDtor();
}

void GetTradesAndOrderBooksRequest::SharedDtor() {
  if (this != internal_default_instance()) delete trades_req_;
  if (this != internal_default_instance()) delete orderbooks_req_;
}

void GetTradesAndOrderBooksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTradesAndOrderBooksRequest::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTradesAndOrderBooksRequest& GetTradesAndOrderBooksRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesAndOrderBooksRequest.base);
  return *internal_default_instance();
}


void GetTradesAndOrderBooksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trades_req_ != NULL) {
    delete trades_req_;
  }
  trades_req_ = NULL;
  if (GetArenaNoVirtual() == NULL && orderbooks_req_ != NULL) {
    delete orderbooks_req_;
  }
  orderbooks_req_ = NULL;
  _internal_metadata_.Clear();
}

bool GetTradesAndOrderBooksRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ssigmaapi.markethub.v1.GetTradesRequest trades_req = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trades_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ssigmaapi.markethub.v1.GetOrderBooksRequest orderbooks_req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orderbooks_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  return false;
#undef DO_
}

void GetTradesAndOrderBooksRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.markethub.v1.GetTradesRequest trades_req = 1;
  if (this->has_trades_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trades_req(), output);
  }

  // .ssigmaapi.markethub.v1.GetOrderBooksRequest orderbooks_req = 2;
  if (this->has_orderbooks_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_orderbooks_req(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
}

::google::protobuf::uint8* GetTradesAndOrderBooksRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.markethub.v1.GetTradesRequest trades_req = 1;
  if (this->has_trades_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trades_req(), deterministic, target);
  }

  // .ssigmaapi.markethub.v1.GetOrderBooksRequest orderbooks_req = 2;
  if (this->has_orderbooks_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_orderbooks_req(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  return target;
}

size_t GetTradesAndOrderBooksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ssigmaapi.markethub.v1.GetTradesRequest trades_req = 1;
  if (this->has_trades_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trades_req_);
  }

  // .ssigmaapi.markethub.v1.GetOrderBooksRequest orderbooks_req = 2;
  if (this->has_orderbooks_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orderbooks_req_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTradesAndOrderBooksRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTradesAndOrderBooksRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTradesAndOrderBooksRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
    MergeFrom(*source);
  }
}

void GetTradesAndOrderBooksRequest::MergeFrom(const GetTradesAndOrderBooksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trades_req()) {
    mutable_trades_req()->::ssigmaapi::markethub::v1::GetTradesRequest::MergeFrom(from.trades_req());
  }
  if (from.has_orderbooks_req()) {
    mutable_orderbooks_req()->::ssigmaapi::markethub::v1::GetOrderBooksRequest::MergeFrom(from.orderbooks_req());
  }
}

void GetTradesAndOrderBooksRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTradesAndOrderBooksRequest::CopyFrom(const GetTradesAndOrderBooksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradesAndOrderBooksRequest::IsInitialized() const {
  return true;
}

void GetTradesAndOrderBooksRequest::Swap(GetTradesAndOrderBooksRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTradesAndOrderBooksRequest::InternalSwap(GetTradesAndOrderBooksRequest* other) {
  using std::swap;
  swap(trades_req_, other->trades_req_);
  swap(orderbooks_req_, other->orderbooks_req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTradesAndOrderBooksRequest::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTradesAndOrderBooksResponse::InitAsDefaultInstance() {
  ::ssigmaapi::markethub::v1::_GetTradesAndOrderBooksResponse_default_instance_._instance.get_mutable()->trades_res_ = const_cast< ::ssigmaapi::markethub::v1::GetTradesResponse*>(
      ::ssigmaapi::markethub::v1::GetTradesResponse::internal_default_instance());
  ::ssigmaapi::markethub::v1::_GetTradesAndOrderBooksResponse_default_instance_._instance.get_mutable()->orderbooks_res_ = const_cast< ::ssigmaapi::markethub::v1::GetOrderBooksResponse*>(
      ::ssigmaapi::markethub::v1::GetOrderBooksResponse::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTradesAndOrderBooksResponse::kTradesResFieldNumber;
const int GetTradesAndOrderBooksResponse::kOrderbooksResFieldNumber;
const int GetTradesAndOrderBooksResponse::kExchangeStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTradesAndOrderBooksResponse::GetTradesAndOrderBooksResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesAndOrderBooksResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
}
GetTradesAndOrderBooksResponse::GetTradesAndOrderBooksResponse(const GetTradesAndOrderBooksResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      exchange_status_(from.exchange_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trades_res()) {
    trades_res_ = new ::ssigmaapi::markethub::v1::GetTradesResponse(*from.trades_res_);
  } else {
    trades_res_ = NULL;
  }
  if (from.has_orderbooks_res()) {
    orderbooks_res_ = new ::ssigmaapi::markethub::v1::GetOrderBooksResponse(*from.orderbooks_res_);
  } else {
    orderbooks_res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
}

void GetTradesAndOrderBooksResponse::SharedCtor() {
  ::memset(&trades_res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderbooks_res_) -
      reinterpret_cast<char*>(&trades_res_)) + sizeof(orderbooks_res_));
}

GetTradesAndOrderBooksResponse::~GetTradesAndOrderBooksResponse() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  SharedDtor();
}

void GetTradesAndOrderBooksResponse::SharedDtor() {
  if (this != internal_default_instance()) delete trades_res_;
  if (this != internal_default_instance()) delete orderbooks_res_;
}

void GetTradesAndOrderBooksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTradesAndOrderBooksResponse::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTradesAndOrderBooksResponse& GetTradesAndOrderBooksResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_GetTradesAndOrderBooksResponse.base);
  return *internal_default_instance();
}


void GetTradesAndOrderBooksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_status_.Clear();
  if (GetArenaNoVirtual() == NULL && trades_res_ != NULL) {
    delete trades_res_;
  }
  trades_res_ = NULL;
  if (GetArenaNoVirtual() == NULL && orderbooks_res_ != NULL) {
    delete orderbooks_res_;
  }
  orderbooks_res_ = NULL;
  _internal_metadata_.Clear();
}

bool GetTradesAndOrderBooksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ssigmaapi.markethub.v1.GetTradesResponse trades_res = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trades_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ssigmaapi.markethub.v1.GetOrderBooksResponse orderbooks_res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orderbooks_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_exchange_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  return false;
#undef DO_
}

void GetTradesAndOrderBooksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.markethub.v1.GetTradesResponse trades_res = 1;
  if (this->has_trades_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trades_res(), output);
  }

  // .ssigmaapi.markethub.v1.GetOrderBooksResponse orderbooks_res = 2;
  if (this->has_orderbooks_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_orderbooks_res(), output);
  }

  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exchange_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->exchange_status(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
}

::google::protobuf::uint8* GetTradesAndOrderBooksResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.markethub.v1.GetTradesResponse trades_res = 1;
  if (this->has_trades_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trades_res(), deterministic, target);
  }

  // .ssigmaapi.markethub.v1.GetOrderBooksResponse orderbooks_res = 2;
  if (this->has_orderbooks_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_orderbooks_res(), deterministic, target);
  }

  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exchange_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->exchange_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  return target;
}

size_t GetTradesAndOrderBooksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ssigmaapi.markethub.v1.ExchangeStatus exchange_status = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->exchange_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exchange_status(static_cast<int>(i)));
    }
  }

  // .ssigmaapi.markethub.v1.GetTradesResponse trades_res = 1;
  if (this->has_trades_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trades_res_);
  }

  // .ssigmaapi.markethub.v1.GetOrderBooksResponse orderbooks_res = 2;
  if (this->has_orderbooks_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orderbooks_res_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTradesAndOrderBooksResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTradesAndOrderBooksResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTradesAndOrderBooksResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
    MergeFrom(*source);
  }
}

void GetTradesAndOrderBooksResponse::MergeFrom(const GetTradesAndOrderBooksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exchange_status_.MergeFrom(from.exchange_status_);
  if (from.has_trades_res()) {
    mutable_trades_res()->::ssigmaapi::markethub::v1::GetTradesResponse::MergeFrom(from.trades_res());
  }
  if (from.has_orderbooks_res()) {
    mutable_orderbooks_res()->::ssigmaapi::markethub::v1::GetOrderBooksResponse::MergeFrom(from.orderbooks_res());
  }
}

void GetTradesAndOrderBooksResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTradesAndOrderBooksResponse::CopyFrom(const GetTradesAndOrderBooksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.GetTradesAndOrderBooksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradesAndOrderBooksResponse::IsInitialized() const {
  return true;
}

void GetTradesAndOrderBooksResponse::Swap(GetTradesAndOrderBooksResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTradesAndOrderBooksResponse::InternalSwap(GetTradesAndOrderBooksResponse* other) {
  using std::swap;
  CastToBase(&exchange_status_)->InternalSwap(CastToBase(&other->exchange_status_));
  swap(trades_res_, other->trades_res_);
  swap(orderbooks_res_, other->orderbooks_res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTradesAndOrderBooksResponse::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeWithAdditionalInfo::InitAsDefaultInstance() {
  ::ssigmaapi::markethub::v1::_TradeWithAdditionalInfo_default_instance_._instance.get_mutable()->trade_ = const_cast< ::ssigmaapi::type::Trade*>(
      ::ssigmaapi::type::Trade::internal_default_instance());
}
void TradeWithAdditionalInfo::clear_trade() {
  if (GetArenaNoVirtual() == NULL && trade_ != NULL) {
    delete trade_;
  }
  trade_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeWithAdditionalInfo::kTradeFieldNumber;
const int TradeWithAdditionalInfo::kVelocityFieldNumber;
const int TradeWithAdditionalInfo::kAccelerationFieldNumber;
const int TradeWithAdditionalInfo::kVolatilityFieldNumber;
const int TradeWithAdditionalInfo::kVolumeBaseFieldNumber;
const int TradeWithAdditionalInfo::kVolumeQuoteFieldNumber;
const int TradeWithAdditionalInfo::kMomentumRateFieldNumber;
const int TradeWithAdditionalInfo::kVelocityWindowingSizeFieldNumber;
const int TradeWithAdditionalInfo::kVolatilityWindowingSizeFieldNumber;
const int TradeWithAdditionalInfo::kVolumeWindowingSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeWithAdditionalInfo::TradeWithAdditionalInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_TradeWithAdditionalInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
}
TradeWithAdditionalInfo::TradeWithAdditionalInfo(const TradeWithAdditionalInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trade()) {
    trade_ = new ::ssigmaapi::type::Trade(*from.trade_);
  } else {
    trade_ = NULL;
  }
  ::memcpy(&velocity_, &from.velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_windowing_size_) -
    reinterpret_cast<char*>(&velocity_)) + sizeof(volume_windowing_size_));
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
}

void TradeWithAdditionalInfo::SharedCtor() {
  ::memset(&trade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_windowing_size_) -
      reinterpret_cast<char*>(&trade_)) + sizeof(volume_windowing_size_));
}

TradeWithAdditionalInfo::~TradeWithAdditionalInfo() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  SharedDtor();
}

void TradeWithAdditionalInfo::SharedDtor() {
  if (this != internal_default_instance()) delete trade_;
}

void TradeWithAdditionalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradeWithAdditionalInfo::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeWithAdditionalInfo& TradeWithAdditionalInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_TradeWithAdditionalInfo.base);
  return *internal_default_instance();
}


void TradeWithAdditionalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trade_ != NULL) {
    delete trade_;
  }
  trade_ = NULL;
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_windowing_size_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(volume_windowing_size_));
  _internal_metadata_.Clear();
}

bool TradeWithAdditionalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ssigmaapi.type.Trade trade = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trade()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volatility = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volatility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volume_base = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volume_quote = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_quote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double momentum_rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &momentum_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 velocity_windowing_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &velocity_windowing_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 volatility_windowing_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volatility_windowing_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 volume_windowing_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_windowing_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  return false;
#undef DO_
}

void TradeWithAdditionalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.type.Trade trade = 1;
  if (this->has_trade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_trade(), output);
  }

  // double velocity = 2;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->velocity(), output);
  }

  // double acceleration = 3;
  if (this->acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->acceleration(), output);
  }

  // double volatility = 4;
  if (this->volatility() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volatility(), output);
  }

  // double volume_base = 5;
  if (this->volume_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volume_base(), output);
  }

  // double volume_quote = 6;
  if (this->volume_quote() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->volume_quote(), output);
  }

  // double momentum_rate = 7;
  if (this->momentum_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->momentum_rate(), output);
  }

  // int64 velocity_windowing_size = 8;
  if (this->velocity_windowing_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->velocity_windowing_size(), output);
  }

  // int64 volatility_windowing_size = 9;
  if (this->volatility_windowing_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->volatility_windowing_size(), output);
  }

  // int64 volume_windowing_size = 10;
  if (this->volume_windowing_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->volume_windowing_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
}

::google::protobuf::uint8* TradeWithAdditionalInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.type.Trade trade = 1;
  if (this->has_trade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_trade(), deterministic, target);
  }

  // double velocity = 2;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->velocity(), target);
  }

  // double acceleration = 3;
  if (this->acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->acceleration(), target);
  }

  // double volatility = 4;
  if (this->volatility() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volatility(), target);
  }

  // double volume_base = 5;
  if (this->volume_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->volume_base(), target);
  }

  // double volume_quote = 6;
  if (this->volume_quote() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->volume_quote(), target);
  }

  // double momentum_rate = 7;
  if (this->momentum_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->momentum_rate(), target);
  }

  // int64 velocity_windowing_size = 8;
  if (this->velocity_windowing_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->velocity_windowing_size(), target);
  }

  // int64 volatility_windowing_size = 9;
  if (this->volatility_windowing_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->volatility_windowing_size(), target);
  }

  // int64 volume_windowing_size = 10;
  if (this->volume_windowing_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->volume_windowing_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  return target;
}

size_t TradeWithAdditionalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ssigmaapi.type.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  // double velocity = 2;
  if (this->velocity() != 0) {
    total_size += 1 + 8;
  }

  // double acceleration = 3;
  if (this->acceleration() != 0) {
    total_size += 1 + 8;
  }

  // double volatility = 4;
  if (this->volatility() != 0) {
    total_size += 1 + 8;
  }

  // double volume_base = 5;
  if (this->volume_base() != 0) {
    total_size += 1 + 8;
  }

  // double volume_quote = 6;
  if (this->volume_quote() != 0) {
    total_size += 1 + 8;
  }

  // double momentum_rate = 7;
  if (this->momentum_rate() != 0) {
    total_size += 1 + 8;
  }

  // int64 velocity_windowing_size = 8;
  if (this->velocity_windowing_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->velocity_windowing_size());
  }

  // int64 volatility_windowing_size = 9;
  if (this->volatility_windowing_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volatility_windowing_size());
  }

  // int64 volume_windowing_size = 10;
  if (this->volume_windowing_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume_windowing_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeWithAdditionalInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeWithAdditionalInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeWithAdditionalInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
    MergeFrom(*source);
  }
}

void TradeWithAdditionalInfo::MergeFrom(const TradeWithAdditionalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    mutable_trade()->::ssigmaapi::type::Trade::MergeFrom(from.trade());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.acceleration() != 0) {
    set_acceleration(from.acceleration());
  }
  if (from.volatility() != 0) {
    set_volatility(from.volatility());
  }
  if (from.volume_base() != 0) {
    set_volume_base(from.volume_base());
  }
  if (from.volume_quote() != 0) {
    set_volume_quote(from.volume_quote());
  }
  if (from.momentum_rate() != 0) {
    set_momentum_rate(from.momentum_rate());
  }
  if (from.velocity_windowing_size() != 0) {
    set_velocity_windowing_size(from.velocity_windowing_size());
  }
  if (from.volatility_windowing_size() != 0) {
    set_volatility_windowing_size(from.volatility_windowing_size());
  }
  if (from.volume_windowing_size() != 0) {
    set_volume_windowing_size(from.volume_windowing_size());
  }
}

void TradeWithAdditionalInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeWithAdditionalInfo::CopyFrom(const TradeWithAdditionalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.TradeWithAdditionalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeWithAdditionalInfo::IsInitialized() const {
  return true;
}

void TradeWithAdditionalInfo::Swap(TradeWithAdditionalInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeWithAdditionalInfo::InternalSwap(TradeWithAdditionalInfo* other) {
  using std::swap;
  swap(trade_, other->trade_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(volatility_, other->volatility_);
  swap(volume_base_, other->volume_base_);
  swap(volume_quote_, other->volume_quote_);
  swap(momentum_rate_, other->momentum_rate_);
  swap(velocity_windowing_size_, other->velocity_windowing_size_);
  swap(volatility_windowing_size_, other->volatility_windowing_size_);
  swap(volume_windowing_size_, other->volume_windowing_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradeWithAdditionalInfo::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradesWithMarket::InitAsDefaultInstance() {
  ::ssigmaapi::markethub::v1::_TradesWithMarket_default_instance_._instance.get_mutable()->market_ = const_cast< ::ssigmaapi::type::Market*>(
      ::ssigmaapi::type::Market::internal_default_instance());
}
void TradesWithMarket::clear_market() {
  if (GetArenaNoVirtual() == NULL && market_ != NULL) {
    delete market_;
  }
  market_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradesWithMarket::kMarketFieldNumber;
const int TradesWithMarket::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradesWithMarket::TradesWithMarket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_TradesWithMarket.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.TradesWithMarket)
}
TradesWithMarket::TradesWithMarket(const TradesWithMarket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_market()) {
    market_ = new ::ssigmaapi::type::Market(*from.market_);
  } else {
    market_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.TradesWithMarket)
}

void TradesWithMarket::SharedCtor() {
  market_ = NULL;
}

TradesWithMarket::~TradesWithMarket() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.TradesWithMarket)
  SharedDtor();
}

void TradesWithMarket::SharedDtor() {
  if (this != internal_default_instance()) delete market_;
}

void TradesWithMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradesWithMarket::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradesWithMarket& TradesWithMarket::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_TradesWithMarket.base);
  return *internal_default_instance();
}


void TradesWithMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.TradesWithMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  if (GetArenaNoVirtual() == NULL && market_ != NULL) {
    delete market_;
  }
  market_ = NULL;
  _internal_metadata_.Clear();
}

bool TradesWithMarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.TradesWithMarket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ssigmaapi.type.Market market = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_market()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ssigmaapi.markethub.v1.TradeWithAdditionalInfo trades = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.TradesWithMarket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.TradesWithMarket)
  return false;
#undef DO_
}

void TradesWithMarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.TradesWithMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.type.Market market = 1;
  if (this->has_market()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_market(), output);
  }

  // repeated .ssigmaapi.markethub.v1.TradeWithAdditionalInfo trades = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trades(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.TradesWithMarket)
}

::google::protobuf::uint8* TradesWithMarket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.TradesWithMarket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ssigmaapi.type.Market market = 1;
  if (this->has_market()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_market(), deterministic, target);
  }

  // repeated .ssigmaapi.markethub.v1.TradeWithAdditionalInfo trades = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trades(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.TradesWithMarket)
  return target;
}

size_t TradesWithMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.TradesWithMarket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ssigmaapi.markethub.v1.TradeWithAdditionalInfo trades = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  // .ssigmaapi.type.Market market = 1;
  if (this->has_market()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *market_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradesWithMarket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.TradesWithMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const TradesWithMarket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradesWithMarket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.TradesWithMarket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.TradesWithMarket)
    MergeFrom(*source);
  }
}

void TradesWithMarket::MergeFrom(const TradesWithMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.TradesWithMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
  if (from.has_market()) {
    mutable_market()->::ssigmaapi::type::Market::MergeFrom(from.market());
  }
}

void TradesWithMarket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.TradesWithMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradesWithMarket::CopyFrom(const TradesWithMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.TradesWithMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesWithMarket::IsInitialized() const {
  return true;
}

void TradesWithMarket::Swap(TradesWithMarket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradesWithMarket::InternalSwap(TradesWithMarket* other) {
  using std::swap;
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
  swap(market_, other->market_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradesWithMarket::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExchangeStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeStatus::kExchangeFieldNumber;
const int ExchangeStatus::kOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeStatus::ExchangeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_ExchangeStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.markethub.v1.ExchangeStatus)
}
ExchangeStatus::ExchangeStatus(const ExchangeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.markethub.v1.ExchangeStatus)
}

void ExchangeStatus::SharedCtor() {
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_ = false;
}

ExchangeStatus::~ExchangeStatus() {
  // @@protoc_insertion_point(destructor:ssigmaapi.markethub.v1.ExchangeStatus)
  SharedDtor();
}

void ExchangeStatus::SharedDtor() {
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExchangeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExchangeStatus::descriptor() {
  ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeStatus& ExchangeStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::scc_info_ExchangeStatus.base);
  return *internal_default_instance();
}


void ExchangeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.markethub.v1.ExchangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_ = false;
  _internal_metadata_.Clear();
}

bool ExchangeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.markethub.v1.ExchangeStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.markethub.v1.ExchangeStatus.exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.markethub.v1.ExchangeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.markethub.v1.ExchangeStatus)
  return false;
#undef DO_
}

void ExchangeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.markethub.v1.ExchangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange = 1;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.markethub.v1.ExchangeStatus.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchange(), output);
  }

  // bool open = 2;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->open(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.markethub.v1.ExchangeStatus)
}

::google::protobuf::uint8* ExchangeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.markethub.v1.ExchangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange = 1;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.markethub.v1.ExchangeStatus.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exchange(), target);
  }

  // bool open = 2;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->open(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.markethub.v1.ExchangeStatus)
  return target;
}

size_t ExchangeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.markethub.v1.ExchangeStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string exchange = 1;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // bool open = 2;
  if (this->open() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExchangeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.markethub.v1.ExchangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.markethub.v1.ExchangeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.markethub.v1.ExchangeStatus)
    MergeFrom(*source);
  }
}

void ExchangeStatus::MergeFrom(const ExchangeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.markethub.v1.ExchangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
}

void ExchangeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.markethub.v1.ExchangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeStatus::CopyFrom(const ExchangeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.markethub.v1.ExchangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeStatus::IsInitialized() const {
  return true;
}

void ExchangeStatus::Swap(ExchangeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeStatus::InternalSwap(ExchangeStatus* other) {
  using std::swap;
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(open_, other->open_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExchangeStatus::GetMetadata() const {
  protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssigmaapi_2fmarkethub_2fv1_2fmarkethub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace markethub
}  // namespace ssigmaapi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::GetTradesRequest* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::GetTradesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::GetTradesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::GetTradesResponse* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::GetTradesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::GetTradesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::GetOrderBooksRequest* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::GetOrderBooksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::GetOrderBooksRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::GetOrderBooksResponse* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::GetOrderBooksResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::GetOrderBooksResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::GetTradesAndOrderBooksResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::TradeWithAdditionalInfo* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::TradeWithAdditionalInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::TradeWithAdditionalInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::TradesWithMarket* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::TradesWithMarket >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::TradesWithMarket >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ssigmaapi::markethub::v1::ExchangeStatus* Arena::CreateMaybeMessage< ::ssigmaapi::markethub::v1::ExchangeStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::markethub::v1::ExchangeStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
