// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssigmaapi/type/trade.proto

#include "ssigmaapi/type/trade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ssigmaapi_2ftype_2ftrade_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Trade_ssigmaapi_2ftype_2ftrade_2eproto;
namespace ssigmaapi {
namespace type {
class TradesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trades> _instance;
} _Trades_default_instance_;
class TradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trade> _instance;
} _Trade_default_instance_;
}  // namespace type
}  // namespace ssigmaapi
static void InitDefaultsTrades_ssigmaapi_2ftype_2ftrade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::type::_Trades_default_instance_;
    new (ptr) ::ssigmaapi::type::Trades();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::type::Trades::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Trades_ssigmaapi_2ftype_2ftrade_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrades_ssigmaapi_2ftype_2ftrade_2eproto}, {
      &scc_info_Trade_ssigmaapi_2ftype_2ftrade_2eproto.base,}};

static void InitDefaultsTrade_ssigmaapi_2ftype_2ftrade_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ssigmaapi::type::_Trade_default_instance_;
    new (ptr) ::ssigmaapi::type::Trade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ssigmaapi::type::Trade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Trade_ssigmaapi_2ftype_2ftrade_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrade_ssigmaapi_2ftype_2ftrade_2eproto}, {}};

void InitDefaults_ssigmaapi_2ftype_2ftrade_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Trades_ssigmaapi_2ftype_2ftrade_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trade_ssigmaapi_2ftype_2ftrade_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ssigmaapi_2ftype_2ftrade_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_ssigmaapi_2ftype_2ftrade_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ssigmaapi_2ftype_2ftrade_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ssigmaapi_2ftype_2ftrade_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trades, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trades, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, symbol_),
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, trade_id_),
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, exchange_),
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, base_),
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, quote_),
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, price_),
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, amount_),
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ssigmaapi::type::Trade, side_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ssigmaapi::type::Trades)},
  { 6, -1, sizeof(::ssigmaapi::type::Trade)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::type::_Trades_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ssigmaapi::type::_Trade_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ssigmaapi_2ftype_2ftrade_2eproto = {
  {}, AddDescriptors_ssigmaapi_2ftype_2ftrade_2eproto, "ssigmaapi/type/trade.proto", schemas,
  file_default_instances, TableStruct_ssigmaapi_2ftype_2ftrade_2eproto::offsets,
  file_level_metadata_ssigmaapi_2ftype_2ftrade_2eproto, 2, file_level_enum_descriptors_ssigmaapi_2ftype_2ftrade_2eproto, file_level_service_descriptors_ssigmaapi_2ftype_2ftrade_2eproto,
};

const char descriptor_table_protodef_ssigmaapi_2ftype_2ftrade_2eproto[] =
  "\n\032ssigmaapi/type/trade.proto\022\016ssigmaapi."
  "type\"/\n\006Trades\022%\n\006trades\030\001 \003(\0132\025.ssigmaa"
  "pi.type.Trade\"\230\001\n\005Trade\022\016\n\006symbol\030\001 \001(\t\022"
  "\020\n\010trade_id\030\002 \001(\t\022\020\n\010exchange\030\003 \001(\t\022\014\n\004b"
  "ase\030\004 \001(\t\022\r\n\005quote\030\005 \001(\t\022\r\n\005price\030\006 \001(\001\022"
  "\016\n\006amount\030\007 \001(\001\022\021\n\ttimestamp\030\010 \001(\003\022\014\n\004si"
  "de\030\t \001(\tB2Z0github.com/sansigma/ssigmaap"
  "igo/type/trade;tradeb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ssigmaapi_2ftype_2ftrade_2eproto = {
  false, InitDefaults_ssigmaapi_2ftype_2ftrade_2eproto, 
  descriptor_table_protodef_ssigmaapi_2ftype_2ftrade_2eproto,
  "ssigmaapi/type/trade.proto", &assign_descriptors_table_ssigmaapi_2ftype_2ftrade_2eproto, 308,
};

void AddDescriptors_ssigmaapi_2ftype_2ftrade_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ssigmaapi_2ftype_2ftrade_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssigmaapi_2ftype_2ftrade_2eproto = []() { AddDescriptors_ssigmaapi_2ftype_2ftrade_2eproto(); return true; }();
namespace ssigmaapi {
namespace type {

// ===================================================================

void Trades::InitAsDefaultInstance() {
}
class Trades::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trades::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trades::Trades()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.type.Trades)
}
Trades::Trades(const Trades& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.type.Trades)
}

void Trades::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Trades_ssigmaapi_2ftype_2ftrade_2eproto.base);
}

Trades::~Trades() {
  // @@protoc_insertion_point(destructor:ssigmaapi.type.Trades)
  SharedDtor();
}

void Trades::SharedDtor() {
}

void Trades::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trades& Trades::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Trades_ssigmaapi_2ftype_2ftrade_2eproto.base);
  return *internal_default_instance();
}


void Trades::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.type.Trades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trades::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Trades*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ssigmaapi.type.Trade trades = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ssigmaapi::type::Trade::_InternalParse;
          object = msg->add_trades();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trades::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.type.Trades)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssigmaapi.type.Trade trades = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.type.Trades)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.type.Trades)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trades::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.type.Trades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->trades(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.type.Trades)
}

::google::protobuf::uint8* Trades::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.type.Trades)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->trades(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.type.Trades)
  return target;
}

size_t Trades::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.type.Trades)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ssigmaapi.type.Trade trades = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trades(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trades::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.type.Trades)
  GOOGLE_DCHECK_NE(&from, this);
  const Trades* source =
      ::google::protobuf::DynamicCastToGenerated<Trades>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.type.Trades)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.type.Trades)
    MergeFrom(*source);
  }
}

void Trades::MergeFrom(const Trades& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.type.Trades)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void Trades::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.type.Trades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trades::CopyFrom(const Trades& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.type.Trades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trades::IsInitialized() const {
  return true;
}

void Trades::Swap(Trades* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trades::InternalSwap(Trades* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trades_)->InternalSwap(CastToBase(&other->trades_));
}

::google::protobuf::Metadata Trades::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ssigmaapi_2ftype_2ftrade_2eproto);
  return ::file_level_metadata_ssigmaapi_2ftype_2ftrade_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Trade::InitAsDefaultInstance() {
}
class Trade::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trade::kSymbolFieldNumber;
const int Trade::kTradeIdFieldNumber;
const int Trade::kExchangeFieldNumber;
const int Trade::kBaseFieldNumber;
const int Trade::kQuoteFieldNumber;
const int Trade::kPriceFieldNumber;
const int Trade::kAmountFieldNumber;
const int Trade::kTimestampFieldNumber;
const int Trade::kSideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trade::Trade()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssigmaapi.type.Trade)
}
Trade::Trade(const Trade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trade_id().size() > 0) {
    trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  base_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.base().size() > 0) {
    base_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_);
  }
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quote().size() > 0) {
    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  side_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.side().size() > 0) {
    side_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.side_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ssigmaapi.type.Trade)
}

void Trade::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Trade_ssigmaapi_2ftype_2ftrade_2eproto.base);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:ssigmaapi.type.Trade)
  SharedDtor();
}

void Trade::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trade& Trade::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Trade_ssigmaapi_2ftype_2ftrade_2eproto.base);
  return *internal_default_instance();
}


void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:ssigmaapi.type.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&price_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trade::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Trade*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ssigmaapi.type.Trade.symbol");
        object = msg->mutable_symbol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trade_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ssigmaapi.type.Trade.trade_id");
        object = msg->mutable_trade_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string exchange = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ssigmaapi.type.Trade.exchange");
        object = msg->mutable_exchange();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string base = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ssigmaapi.type.Trade.base");
        object = msg->mutable_base();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string quote = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ssigmaapi.type.Trade.quote");
        object = msg->mutable_quote();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double price = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double amount = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 timestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string side = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ssigmaapi.type.Trade.side");
        object = msg->mutable_side();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssigmaapi.type.Trade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.Trade.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trade_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trade_id().data(), static_cast<int>(this->trade_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.Trade.trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.Trade.exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string base = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->base().data(), static_cast<int>(this->base().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.Trade.base"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string quote = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->quote().data(), static_cast<int>(this->quote().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.Trade.quote"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string side = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->side().data(), static_cast<int>(this->side().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssigmaapi.type.Trade.side"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssigmaapi.type.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssigmaapi.type.Trade)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssigmaapi.type.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_id().data(), static_cast<int>(this->trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.trade_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trade_id(), output);
  }

  // string exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // string base = 4;
  if (this->base().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base().data(), static_cast<int>(this->base().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.base");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->base(), output);
  }

  // string quote = 5;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), static_cast<int>(this->quote().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.quote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->quote(), output);
  }

  // double price = 6;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->price(), output);
  }

  // double amount = 7;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->amount(), output);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp(), output);
  }

  // string side = 9;
  if (this->side().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->side().data(), static_cast<int>(this->side().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.side");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->side(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ssigmaapi.type.Trade)
}

::google::protobuf::uint8* Trade::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssigmaapi.type.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_id().data(), static_cast<int>(this->trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.trade_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trade_id(), target);
  }

  // string exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // string base = 4;
  if (this->base().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->base().data(), static_cast<int>(this->base().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.base");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->base(), target);
  }

  // string quote = 5;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), static_cast<int>(this->quote().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.quote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->quote(), target);
  }

  // double price = 6;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->price(), target);
  }

  // double amount = 7;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->amount(), target);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->timestamp(), target);
  }

  // string side = 9;
  if (this->side().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->side().data(), static_cast<int>(this->side().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssigmaapi.type.Trade.side");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->side(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ssigmaapi.type.Trade)
  return target;
}

size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssigmaapi.type.Trade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_id());
  }

  // string exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string base = 4;
  if (this->base().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->base());
  }

  // string quote = 5;
  if (this->quote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->quote());
  }

  // string side = 9;
  if (this->side().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->side());
  }

  // double price = 6;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double amount = 7;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssigmaapi.type.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trade* source =
      ::google::protobuf::DynamicCastToGenerated<Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssigmaapi.type.Trade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssigmaapi.type.Trade)
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssigmaapi.type.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.trade_id().size() > 0) {

    trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.base().size() > 0) {

    base_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_);
  }
  if (from.quote().size() > 0) {

    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  if (from.side().size() > 0) {

    side_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.side_);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Trade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssigmaapi.type.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssigmaapi.type.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  return true;
}

void Trade::Swap(Trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trade::InternalSwap(Trade* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_id_.Swap(&other->trade_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base_.Swap(&other->base_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quote_.Swap(&other->quote_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  side_.Swap(&other->side_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(amount_, other->amount_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata Trade::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ssigmaapi_2ftype_2ftrade_2eproto);
  return ::file_level_metadata_ssigmaapi_2ftype_2ftrade_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace ssigmaapi
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ssigmaapi::type::Trades* Arena::CreateMaybeMessage< ::ssigmaapi::type::Trades >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::type::Trades >(arena);
}
template<> PROTOBUF_NOINLINE ::ssigmaapi::type::Trade* Arena::CreateMaybeMessage< ::ssigmaapi::type::Trade >(Arena* arena) {
  return Arena::CreateInternal< ::ssigmaapi::type::Trade >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
