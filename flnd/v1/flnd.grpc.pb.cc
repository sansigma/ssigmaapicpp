// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ssigmaapi/flnd/v1/flnd.proto

#include "ssigmaapi/flnd/v1/flnd.pb.h"
#include "ssigmaapi/flnd/v1/flnd.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ssigmaapi {
namespace flnd {
namespace v1 {

static const char* VitessServiceV1_method_names[] = {
  "/ssigmaapi.flnd.v1.VitessServiceV1/GetMessage",
  "/ssigmaapi.flnd.v1.VitessServiceV1/CreateMessage",
  "/ssigmaapi.flnd.v1.VitessServiceV1/UpdateMessage",
  "/ssigmaapi.flnd.v1.VitessServiceV1/DeleteMessage",
};

std::unique_ptr< VitessServiceV1::Stub> VitessServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VitessServiceV1::Stub> stub(new VitessServiceV1::Stub(channel));
  return stub;
}

VitessServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMessage_(VitessServiceV1_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateMessage_(VitessServiceV1_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMessage_(VitessServiceV1_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMessage_(VitessServiceV1_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VitessServiceV1::Stub::GetMessage(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::ssigmaapi::flnd::v1::VitessMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMessage_, context, request, response);
}

void VitessServiceV1::Stub::experimental_async::GetMessage(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::ssigmaapi::flnd::v1::VitessMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMessage_, context, request, response, std::move(f));
}

void VitessServiceV1::Stub::experimental_async::GetMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::ssigmaapi::flnd::v1::VitessMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMessage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::ssigmaapi::flnd::v1::VitessMessage>* VitessServiceV1::Stub::AsyncGetMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ssigmaapi::flnd::v1::VitessMessage>::Create(channel_.get(), cq, rpcmethod_GetMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ssigmaapi::flnd::v1::VitessMessage>* VitessServiceV1::Stub::PrepareAsyncGetMessageRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ssigmaapi::flnd::v1::VitessMessage>::Create(channel_.get(), cq, rpcmethod_GetMessage_, context, request, false);
}

::grpc::Status VitessServiceV1::Stub::CreateMessage(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateMessage_, context, request, response);
}

void VitessServiceV1::Stub::experimental_async::CreateMessage(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateMessage_, context, request, response, std::move(f));
}

void VitessServiceV1::Stub::experimental_async::CreateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateMessage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VitessServiceV1::Stub::AsyncCreateMessageRaw(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CreateMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VitessServiceV1::Stub::PrepareAsyncCreateMessageRaw(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CreateMessage_, context, request, false);
}

::grpc::Status VitessServiceV1::Stub::UpdateMessage(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateMessage_, context, request, response);
}

void VitessServiceV1::Stub::experimental_async::UpdateMessage(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateMessage_, context, request, response, std::move(f));
}

void VitessServiceV1::Stub::experimental_async::UpdateMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateMessage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VitessServiceV1::Stub::AsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UpdateMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VitessServiceV1::Stub::PrepareAsyncUpdateMessageRaw(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_UpdateMessage_, context, request, false);
}

::grpc::Status VitessServiceV1::Stub::DeleteMessage(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteMessage_, context, request, response);
}

void VitessServiceV1::Stub::experimental_async::DeleteMessage(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, std::move(f));
}

void VitessServiceV1::Stub::experimental_async::DeleteMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VitessServiceV1::Stub::AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* VitessServiceV1::Stub::PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::ssigmaapi::flnd::v1::VitessMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteMessage_, context, request, false);
}

VitessServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VitessServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VitessServiceV1::Service, ::google::protobuf::Empty, ::ssigmaapi::flnd::v1::VitessMessage>(
          std::mem_fn(&VitessServiceV1::Service::GetMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VitessServiceV1_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VitessServiceV1::Service, ::ssigmaapi::flnd::v1::VitessMessage, ::google::protobuf::Empty>(
          std::mem_fn(&VitessServiceV1::Service::CreateMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VitessServiceV1_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VitessServiceV1::Service, ::ssigmaapi::flnd::v1::VitessMessage, ::google::protobuf::Empty>(
          std::mem_fn(&VitessServiceV1::Service::UpdateMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VitessServiceV1_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VitessServiceV1::Service, ::ssigmaapi::flnd::v1::VitessMessage, ::google::protobuf::Empty>(
          std::mem_fn(&VitessServiceV1::Service::DeleteMessage), this)));
}

VitessServiceV1::Service::~Service() {
}

::grpc::Status VitessServiceV1::Service::GetMessage(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::ssigmaapi::flnd::v1::VitessMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VitessServiceV1::Service::CreateMessage(::grpc::ServerContext* context, const ::ssigmaapi::flnd::v1::VitessMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VitessServiceV1::Service::UpdateMessage(::grpc::ServerContext* context, const ::ssigmaapi::flnd::v1::VitessMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VitessServiceV1::Service::DeleteMessage(::grpc::ServerContext* context, const ::ssigmaapi::flnd::v1::VitessMessage* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ssigmaapi
}  // namespace flnd
}  // namespace v1

