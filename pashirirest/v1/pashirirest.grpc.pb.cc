// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ssigmaapi/pashirirest/v1/pashirirest.proto

#include "ssigmaapi/pashirirest/v1/pashirirest.pb.h"
#include "ssigmaapi/pashirirest/v1/pashirirest.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ssigmaapi {
namespace pashirirest {
namespace v1 {

static const char* PashiriRestServiceV1_method_names[] = {
  "/ssigmaapi.pashirirest.v1.PashiriRestServiceV1/GetOrderBook",
};

std::unique_ptr< PashiriRestServiceV1::Stub> PashiriRestServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PashiriRestServiceV1::Stub> stub(new PashiriRestServiceV1::Stub(channel));
  return stub;
}

PashiriRestServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetOrderBook_(PashiriRestServiceV1_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::ssigmaapi::type::OrderBook>* PashiriRestServiceV1::Stub::GetOrderBookRaw(::grpc::ClientContext* context, const ::ssigmaapi::type::Market& request) {
  return ::grpc::internal::ClientReaderFactory< ::ssigmaapi::type::OrderBook>::Create(channel_.get(), rpcmethod_GetOrderBook_, context, request);
}

::grpc::ClientAsyncReader< ::ssigmaapi::type::OrderBook>* PashiriRestServiceV1::Stub::AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::ssigmaapi::type::Market& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ssigmaapi::type::OrderBook>::Create(channel_.get(), cq, rpcmethod_GetOrderBook_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ssigmaapi::type::OrderBook>* PashiriRestServiceV1::Stub::PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::ssigmaapi::type::Market& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ssigmaapi::type::OrderBook>::Create(channel_.get(), cq, rpcmethod_GetOrderBook_, context, request, false, nullptr);
}

PashiriRestServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PashiriRestServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PashiriRestServiceV1::Service, ::ssigmaapi::type::Market, ::ssigmaapi::type::OrderBook>(
          std::mem_fn(&PashiriRestServiceV1::Service::GetOrderBook), this)));
}

PashiriRestServiceV1::Service::~Service() {
}

::grpc::Status PashiriRestServiceV1::Service::GetOrderBook(::grpc::ServerContext* context, const ::ssigmaapi::type::Market* request, ::grpc::ServerWriter< ::ssigmaapi::type::OrderBook>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ssigmaapi
}  // namespace pashirirest
}  // namespace v1

