// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ssigmaapi/pashiriwebsocket/v1/pashiriwebsocket.proto

#include "ssigmaapi/pashiriwebsocket/v1/pashiriwebsocket.pb.h"
#include "ssigmaapi/pashiriwebsocket/v1/pashiriwebsocket.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ssigmaapi {
namespace pashiriwebsocket {
namespace v1 {

static const char* PashiriWebsocketServiceV1_method_names[] = {
  "/ssigmaapi.pashiriwebsocket.v1.PashiriWebsocketServiceV1/GetTrades",
};

std::unique_ptr< PashiriWebsocketServiceV1::Stub> PashiriWebsocketServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PashiriWebsocketServiceV1::Stub> stub(new PashiriWebsocketServiceV1::Stub(channel));
  return stub;
}

PashiriWebsocketServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTrades_(PashiriWebsocketServiceV1_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::ssigmaapi::type::Trades>* PashiriWebsocketServiceV1::Stub::GetTradesRaw(::grpc::ClientContext* context, const ::ssigmaapi::type::Market& request) {
  return ::grpc::internal::ClientReaderFactory< ::ssigmaapi::type::Trades>::Create(channel_.get(), rpcmethod_GetTrades_, context, request);
}

::grpc::ClientAsyncReader< ::ssigmaapi::type::Trades>* PashiriWebsocketServiceV1::Stub::AsyncGetTradesRaw(::grpc::ClientContext* context, const ::ssigmaapi::type::Market& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ssigmaapi::type::Trades>::Create(channel_.get(), cq, rpcmethod_GetTrades_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ssigmaapi::type::Trades>* PashiriWebsocketServiceV1::Stub::PrepareAsyncGetTradesRaw(::grpc::ClientContext* context, const ::ssigmaapi::type::Market& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ssigmaapi::type::Trades>::Create(channel_.get(), cq, rpcmethod_GetTrades_, context, request, false, nullptr);
}

PashiriWebsocketServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PashiriWebsocketServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PashiriWebsocketServiceV1::Service, ::ssigmaapi::type::Market, ::ssigmaapi::type::Trades>(
          std::mem_fn(&PashiriWebsocketServiceV1::Service::GetTrades), this)));
}

PashiriWebsocketServiceV1::Service::~Service() {
}

::grpc::Status PashiriWebsocketServiceV1::Service::GetTrades(::grpc::ServerContext* context, const ::ssigmaapi::type::Market* request, ::grpc::ServerWriter< ::ssigmaapi::type::Trades>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ssigmaapi
}  // namespace pashiriwebsocket
}  // namespace v1

